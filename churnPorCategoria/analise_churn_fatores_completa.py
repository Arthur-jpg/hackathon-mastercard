#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
AN√ÅLISE COMPLETA DE CHURN POR FATORES INDIVIDUAIS
An√°lise detalhada da taxa de churn baseada em cada caracter√≠stica dos clientes
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

# Configura√ß√£o de estilo
plt.style.use('default')
sns.set_palette("viridis")

print("="*80)
print("üîç AN√ÅLISE COMPLETA DE CHURN POR FATORES INDIVIDUAIS")
print("="*80)
print()

# =============================================================================
# CARREGAMENTO E PREPARA√á√ÉO DOS DADOS
# =============================================================================

print("üìä CARREGANDO BASES DE DADOS:")
print("-" * 30)

# Carregar dados
df_clientes = pd.read_csv('data/Base_clientes.csv')
df_transacoes = pd.read_csv('data/Base_transacoes.csv')
df_cartoes = pd.read_csv('data/Base_cartoes.csv')

print(f"‚úÖ Clientes: {len(df_clientes):,} registros")
print(f"‚úÖ Transa√ß√µes: {len(df_transacoes):,} registros")
print(f"‚úÖ Cart√µes: {len(df_cartoes):,} registros")
print()

# =============================================================================
# IDENTIFICA√á√ÉO DE CHURN POR CLIENTE
# =============================================================================

print("üéØ IDENTIFICANDO CLIENTES COM CHURN:")
print("-" * 35)

# Converter datas
df_transacoes['Data'] = pd.to_datetime(df_transacoes['Data'])
df_clientes['Data_Nascimento'] = pd.to_datetime(df_clientes['Data_Nascimento'], format='%d/%m/%Y')
df_clientes['Data_Criacao_Conta'] = pd.to_datetime(df_clientes['Data_Criacao_Conta'])
df_cartoes['Data_Emissao'] = pd.to_datetime(df_cartoes['Data_Emissao'])

# Data de refer√™ncia (assumindo que dados s√£o at√© agora)
data_referencia = df_transacoes['Data'].max()
print(f"üìÖ Data de refer√™ncia: {data_referencia.strftime('%Y-%m-%d')}")

# √öltima transa√ß√£o de cada cliente
ultima_transacao = df_transacoes.groupby('Cliente_ID')['Data'].max().reset_index()
ultima_transacao.columns = ['Cliente_ID', 'Ultima_Transacao']

# Definir churn: cliente sem transa√ß√µes nos √∫ltimos 90 dias
dias_churn = 90
data_limite_churn = data_referencia - timedelta(days=dias_churn)

ultima_transacao['Churn'] = ultima_transacao['Ultima_Transacao'] < data_limite_churn
ultima_transacao['Dias_Sem_Transacao'] = (data_referencia - ultima_transacao['Ultima_Transacao']).dt.days

print(f"üîç Crit√©rio de churn: {dias_churn} dias sem transa√ß√µes")
print(f"üìä Data limite para churn: {data_limite_churn.strftime('%Y-%m-%d')}")

# Estat√≠sticas de churn
total_clientes = len(ultima_transacao)
clientes_churn = ultima_transacao['Churn'].sum()
taxa_churn_geral = (clientes_churn / total_clientes) * 100

print(f"üìà RESULTADOS GERAIS:")
print(f"   ‚Ä¢ Total de clientes: {total_clientes:,}")
print(f"   ‚Ä¢ Clientes em churn: {clientes_churn:,}")
print(f"   ‚Ä¢ Taxa de churn geral: {taxa_churn_geral:.1f}%")
print()

# =============================================================================
# PREPARA√á√ÉO DOS DADOS PARA AN√ÅLISE
# =============================================================================

# Merge dos dados para an√°lise completa
df_analise = df_clientes.copy()
df_analise = df_analise.merge(ultima_transacao[['Cliente_ID', 'Churn', 'Dias_Sem_Transacao']], 
                             on='Cliente_ID', how='left')

# Calcular idade (tratando poss√≠veis NaN)
df_analise['Idade'] = ((data_referencia - df_analise['Data_Nascimento']).dt.days / 365.25)
df_analise['Idade'] = df_analise['Idade'].fillna(0).astype(int)

# Calcular tempo de conta em meses (tratando poss√≠veis NaN)
df_analise['Tempo_Conta_Meses'] = ((data_referencia - df_analise['Data_Criacao_Conta']).dt.days / 30.44)
df_analise['Tempo_Conta_Meses'] = df_analise['Tempo_Conta_Meses'].fillna(0).astype(int)

# Preparar dados dos cart√µes (vamos pegar informa√ß√µes do cart√£o principal/mais recente)
cartoes_principais = df_cartoes.groupby('ID_Cartao').first().reset_index()

# Mapear cart√µes para clientes (vamos usar o primeiro cart√£o de cada cliente como refer√™ncia)
# Primeiro, precisamos conectar cart√µes com clientes atrav√©s das transa√ß√µes
cartao_cliente = df_transacoes[['Cliente_ID', 'ID_Cartao']].drop_duplicates()
cartao_info = cartao_cliente.merge(df_cartoes, on='ID_Cartao', how='left')

# Para cada cliente, pegar informa√ß√µes do cart√£o mais utilizado
cartao_por_cliente = cartao_info.groupby('Cliente_ID').first().reset_index()

# Merge com dados de cart√µes
df_analise = df_analise.merge(cartao_por_cliente[['Cliente_ID', 'Produto_Mastercard', 'Tipo_Cartao', 
                                                'Data_Emissao', 'Limite_Cartao']], 
                             on='Cliente_ID', how='left')

# Calcular tempo desde emiss√£o do cart√£o (tratando NaN)
df_analise['Tempo_Cartao_Meses'] = ((data_referencia - df_analise['Data_Emissao']).dt.days / 30.44)
df_analise['Tempo_Cartao_Meses'] = df_analise['Tempo_Cartao_Meses'].fillna(-1).astype(int)

print("üìä DADOS PREPARADOS PARA AN√ÅLISE:")
print(f"   ‚Ä¢ Clientes com dados completos: {len(df_analise):,}")
print(f"   ‚Ä¢ Vari√°veis para an√°lise: {df_analise.shape[1]}")
print()

# =============================================================================
# FUN√á√ÉO PARA AN√ÅLISE DE CHURN POR FATOR
# =============================================================================

def analisar_churn_por_fator(df, coluna, titulo, tipo_variavel='categorica', bins=None):
    """
    An√°lise de churn por fator espec√≠fico
    """
    print(f"üîç Analisando: {titulo}")
    print("-" * 50)
    
    # Remover valores nulos
    df_clean = df.dropna(subset=[coluna, 'Churn'])
    
    if tipo_variavel == 'numerica' and bins is not None:
        # Para vari√°veis num√©ricas, criar faixas
        df_clean[f'{coluna}_Faixa'] = pd.cut(df_clean[coluna], bins=bins, include_lowest=True)
        coluna_analise = f'{coluna}_Faixa'
    else:
        coluna_analise = coluna
    
    # An√°lise por grupo
    analise = df_clean.groupby(coluna_analise).agg({
        'Churn': ['count', 'sum'],
        'Cliente_ID': 'count'
    }).round(2)
    
    # Flatten columns
    analise.columns = ['Total_Clientes', 'Clientes_Churn', 'Total_Clientes_2']
    analise = analise.drop('Total_Clientes_2', axis=1)
    
    # Converter para num√©rico e calcular taxa de churn
    analise['Total_Clientes'] = pd.to_numeric(analise['Total_Clientes'], errors='coerce')
    analise['Clientes_Churn'] = pd.to_numeric(analise['Clientes_Churn'], errors='coerce')
    analise['Taxa_Churn'] = (analise['Clientes_Churn'] / analise['Total_Clientes'] * 100).round(1)
    
    # Calcular percentual do total
    analise['Pct_Base'] = (analise['Total_Clientes'] / analise['Total_Clientes'].sum() * 100).round(1)
    
    # Ordenar por taxa de churn (descendente)
    analise = analise.sort_values('Taxa_Churn', ascending=False)
    
    print("üìä RESULTADOS:")
    for idx, row in analise.head(10).iterrows():  # Top 10 para n√£o poluir output
        print(f"   ‚Ä¢ {idx}: {row['Taxa_Churn']:.1f}% churn ({row['Clientes_Churn']:.0f}/{row['Total_Clientes']:.0f} clientes)")
    
    if len(analise) > 10:
        print(f"   ... (e mais {len(analise)-10} categorias)")
    
    print()
    
    return analise

# =============================================================================
# AN√ÅLISES POR FATOR INDIVIDUAL
# =============================================================================

print("="*80)
print("üéØ AN√ÅLISES DE CHURN POR FATOR INDIVIDUAL")
print("="*80)
print()

# Lista para armazenar resultados
resultados_analises = []

# 1. AN√ÅLISE POR IDADE
print("1Ô∏è‚É£ AN√ÅLISE POR IDADE")
faixas_idade = [0, 25, 35, 45, 55, 65, 100]
labels_idade = ['18-25', '26-35', '36-45', '46-55', '56-65', '65+']
resultado_idade = analisar_churn_por_fator(df_analise, 'Idade', 'Faixa Et√°ria', 
                                         'numerica', faixas_idade)
resultados_analises.append(('Idade', resultado_idade))

# 2. AN√ÅLISE POR RENDA ANUAL
print("2Ô∏è‚É£ AN√ÅLISE POR RENDA ANUAL")
faixas_renda = [0, 30000, 50000, 75000, 100000, 150000, 1000000]
resultado_renda = analisar_churn_por_fator(df_analise, 'Renda_Anual', 'Faixa de Renda', 
                                         'numerica', faixas_renda)
resultados_analises.append(('Renda_Anual', resultado_renda))

# 3. AN√ÅLISE POR TEMPO DE CONTA
print("3Ô∏è‚É£ AN√ÅLISE POR TEMPO DE CONTA")
faixas_tempo_conta = [0, 6, 12, 18, 24, 36, 1000]
resultado_tempo_conta = analisar_churn_por_fator(df_analise, 'Tempo_Conta_Meses', 'Tempo de Conta', 
                                               'numerica', faixas_tempo_conta)
resultados_analises.append(('Tempo_Conta', resultado_tempo_conta))

# 4. AN√ÅLISE POR CONTA ADICIONAL
print("4Ô∏è‚É£ AN√ÅLISE POR POSSUI CONTA ADICIONAL")
resultado_conta_adicional = analisar_churn_por_fator(df_analise, 'Possui_Conta_Adicional', 
                                                   'Conta Adicional', 'categorica')
resultados_analises.append(('Conta_Adicional', resultado_conta_adicional))

# 5. AN√ÅLISE POR ESTADO
print("5Ô∏è‚É£ AN√ÅLISE POR ESTADO")
resultado_estado = analisar_churn_por_fator(df_analise, 'Estado', 'Estado', 'categorica')
resultados_analises.append(('Estado', resultado_estado))

# 6. AN√ÅLISE POR TIPO DE CART√ÉO
print("6Ô∏è‚É£ AN√ÅLISE POR TIPO DE CART√ÉO")
resultado_tipo_cartao = analisar_churn_por_fator(df_analise, 'Tipo_Cartao', 'Tipo de Cart√£o', 'categorica')
resultados_analises.append(('Tipo_Cartao', resultado_tipo_cartao))

# 7. AN√ÅLISE POR PRODUTO MASTERCARD
print("7Ô∏è‚É£ AN√ÅLISE POR PRODUTO MASTERCARD")
resultado_produto = analisar_churn_por_fator(df_analise, 'Produto_Mastercard', 'Produto Mastercard', 'categorica')
resultados_analises.append(('Produto_Mastercard', resultado_produto))

# 8. AN√ÅLISE POR TEMPO DE CART√ÉO
print("8Ô∏è‚É£ AN√ÅLISE POR TEMPO DE EMISS√ÉO DO CART√ÉO")
faixas_tempo_cartao = [0, 6, 12, 18, 24, 36, 1000]
resultado_tempo_cartao = analisar_churn_por_fator(df_analise, 'Tempo_Cartao_Meses', 'Tempo do Cart√£o', 
                                                'numerica', faixas_tempo_cartao)
resultados_analises.append(('Tempo_Cartao', resultado_tempo_cartao))

# 9. AN√ÅLISE POR LIMITE DO CART√ÉO
print("9Ô∏è‚É£ AN√ÅLISE POR LIMITE DO CART√ÉO")
# Filtrar apenas cart√µes de cr√©dito (com limite > 0)
df_credito = df_analise[df_analise['Limite_Cartao'] > 0]
faixas_limite = [0, 5000, 15000, 25000, 40000, 1000000]
resultado_limite = analisar_churn_por_fator(df_credito, 'Limite_Cartao', 'Limite do Cart√£o', 
                                          'numerica', faixas_limite)
resultados_analises.append(('Limite_Cartao', resultado_limite))

# =============================================================================
# GERA√á√ÉO DE GR√ÅFICOS
# =============================================================================

print("üìä GERANDO GR√ÅFICOS DE CHURN POR FATOR...")
print()

# Criar figura com subplots para todos os gr√°ficos
fig = plt.figure(figsize=(20, 24))

# Configura√ß√£o dos subplots (3 colunas, 3 linhas)
subplot_configs = [
    (3, 3, 1, 'Idade'),
    (3, 3, 2, 'Renda_Anual'),
    (3, 3, 3, 'Tempo_Conta'),
    (3, 3, 4, 'Conta_Adicional'),
    (3, 3, 5, 'Estado'),
    (3, 3, 6, 'Tipo_Cartao'),
    (3, 3, 7, 'Produto_Mastercard'),
    (3, 3, 8, 'Tempo_Cartao'),
    (3, 3, 9, 'Limite_Cartao')
]

# T√≠tulos dos gr√°ficos
titulos_graficos = {
    'Idade': 'Taxa de Churn por Faixa Et√°ria',
    'Renda_Anual': 'Taxa de Churn por Faixa de Renda',
    'Tempo_Conta': 'Taxa de Churn por Tempo de Conta',
    'Conta_Adicional': 'Taxa de Churn por Conta Adicional',
    'Estado': 'Taxa de Churn por Estado (Top 10)',
    'Tipo_Cartao': 'Taxa de Churn por Tipo de Cart√£o',
    'Produto_Mastercard': 'Taxa de Churn por Produto Mastercard',
    'Tempo_Cartao': 'Taxa de Churn por Tempo do Cart√£o',
    'Limite_Cartao': 'Taxa de Churn por Limite do Cart√£o'
}

for i, (rows, cols, pos, fator) in enumerate(subplot_configs):
    ax = plt.subplot(rows, cols, pos)
    
    # Encontrar dados do fator
    dados_fator = None
    for nome_fator, dados in resultados_analises:
        if nome_fator == fator:
            dados_fator = dados
            break
    
    if dados_fator is not None:
        # Preparar dados para o gr√°fico
        if fator == 'Estado':
            # Para estados, mostrar apenas top 10
            dados_plot = dados_fator.head(10)
        else:
            dados_plot = dados_fator
        
        # Criar gr√°fico de barras
        bars = ax.bar(range(len(dados_plot)), dados_plot['Taxa_Churn'], 
                     color='steelblue', alpha=0.7)
        
        # Configurar eixos
        ax.set_xlabel('Categorias')
        ax.set_ylabel('Taxa de Churn (%)')
        ax.set_title(titulos_graficos[fator], fontweight='bold', pad=20)
        
        # R√≥tulos do eixo X
        labels = [str(idx)[:15] for idx in dados_plot.index]  # Limitar tamanho dos labels
        ax.set_xticks(range(len(dados_plot)))
        ax.set_xticklabels(labels, rotation=45, ha='right')
        
        # Adicionar valores nas barras
        for bar, valor in zip(bars, dados_plot['Taxa_Churn']):
            height = bar.get_height()
            ax.text(bar.get_x() + bar.get_width()/2., height + 0.5,
                   f'{valor:.1f}%', ha='center', va='bottom', fontsize=8)
        
        # Grid
        ax.grid(True, alpha=0.3)
        ax.set_ylim(0, max(dados_plot['Taxa_Churn']) * 1.15)

plt.suptitle('AN√ÅLISE COMPLETA DE CHURN POR FATORES INDIVIDUAIS', 
             fontsize=20, fontweight='bold', y=0.98)
plt.tight_layout()
plt.subplots_adjust(top=0.95)
plt.savefig('analise_churn_completa_fatores.png', dpi=300, bbox_inches='tight')
print("‚úÖ Gr√°fico principal salvo: analise_churn_completa_fatores.png")

# =============================================================================
# INSIGHTS PRINCIPAIS
# =============================================================================

print("="*80)
print("üéØ INSIGHTS PRINCIPAIS - FATORES DE MAIOR IMPACTO NO CHURN")
print("="*80)
print()

print("üîç TOP INSIGHTS POR FATOR:")
print()

# Analisar cada fator para encontrar insights
for nome_fator, dados in resultados_analises:
    if len(dados) > 1:  # S√≥ analisar fatores com m√∫ltiplas categorias
        maior_churn = dados.iloc[0]  # Primeira linha (maior churn)
        menor_churn = dados.iloc[-1]  # √öltima linha (menor churn)
        
        print(f"üìä {nome_fator.upper()}:")
        print(f"   ‚Ä¢ MAIOR risco: {maior_churn.name} ({maior_churn['Taxa_Churn']:.1f}% churn)")
        print(f"   ‚Ä¢ MENOR risco: {menor_churn.name} ({menor_churn['Taxa_Churn']:.1f}% churn)")
        print(f"   ‚Ä¢ Diferen√ßa: {maior_churn['Taxa_Churn'] - menor_churn['Taxa_Churn']:.1f}pp")
        print()

# =============================================================================
# RESUMO EXECUTIVO
# =============================================================================

print("="*80)
print("üìã RESUMO EXECUTIVO - AN√ÅLISE DE CHURN")
print("="*80)
print()

print(f"üìä M√âTRICAS GERAIS:")
print(f"   ‚Ä¢ Taxa de churn geral: {taxa_churn_geral:.1f}%")
print(f"   ‚Ä¢ Crit√©rio: {dias_churn} dias sem transa√ß√µes")
print(f"   ‚Ä¢ Clientes analisados: {len(df_analise):,}")
print(f"   ‚Ä¢ Fatores analisados: {len(resultados_analises)}")
print()

print("üéØ PR√ìXIMOS PASSOS SUGERIDOS:")
print("   1. Focar nos segmentos de MAIOR risco identificados")
print("   2. Desenvolver campanhas de reten√ß√£o espec√≠ficas")
print("   3. Analisar correla√ß√µes entre fatores")
print("   4. Implementar modelo preditivo de churn")
print()

print("="*80)
print("‚úÖ AN√ÅLISE DE CHURN COMPLETA FINALIZADA")
print("="*80)