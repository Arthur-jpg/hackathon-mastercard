#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
AN√ÅLISE COMPARATIVA DE CHURN 2024 - 30, 60 e 90 DIAS
Compara√ß√£o entre diferentes per√≠odos de inatividade para identificar padr√µes
Gera√ß√£o de gr√°ficos comparativos e insights estrat√©gicos
"""

import sqlite3
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# Configura√ß√£o de estilo
plt.style.use('default')
sns.set_palette("Set1")
plt.rcParams['figure.figsize'] = (15, 10)
plt.rcParams['font.size'] = 10

print("="*80)
print("üîç AN√ÅLISE COMPARATIVA DE CHURN 2024 - 30, 60 e 90 DIAS")
print("="*80)
print()

# Conectar ao banco de dados
conn = sqlite3.connect('priceless_bank.db')

# =============================================================================
# FUN√á√ÉO PARA OBTER DADOS DE CHURN POR PER√çODO
# =============================================================================

def obter_dados_churn(dias):
    """
    Obt√©m dados de churn para um per√≠odo espec√≠fico
    """
    print(f"üìä Coletando dados para {dias} dias...")
    
    # Query para idade
    query_idade = f"""
    WITH ultima_transacao_por_cliente AS (
        SELECT cliente_id, MAX(data) as ultima_transacao
        FROM transacoes GROUP BY cliente_id
    )
    SELECT 
        'Idade 35-44' as categoria,
        COUNT(c.cliente_id) as total_clientes,
        SUM(CASE WHEN ut.ultima_transacao < DATE('2024-12-30', '-{dias} days') THEN 1 ELSE 0 END) as clientes_churn,
        ROUND(AVG(CASE WHEN ut.ultima_transacao < DATE('2024-12-30', '-{dias} days') THEN 1.0 ELSE 0.0 END) * 100, 2) as taxa_churn_pct
    FROM clientes c
    LEFT JOIN ultima_transacao_por_cliente ut ON c.cliente_id = ut.cliente_id
    WHERE c.Data_Criacao_Conta >= '2024-01-01' AND c.Data_Criacao_Conta <= '2024-12-31' 
      AND ut.ultima_transacao IS NOT NULL
      AND c.idade BETWEEN 35 AND 44;
    """
    
    # Query para produto Standard
    query_standard = f"""
    WITH ultima_transacao_por_cliente AS (
        SELECT cliente_id, MAX(data) as ultima_transacao
        FROM transacoes GROUP BY cliente_id
    ),
    cartoes_2024 AS (
        SELECT DISTINCT t.cliente_id, cart.produto_mastercard
        FROM transacoes t
        JOIN cartoes cart ON t.id_cartao = cart.id_cartao
        WHERE cart.data_emissao >= '2024-01-01' AND cart.data_emissao <= '2024-12-31'
          AND cart.produto_mastercard = 'Standard'
    )
    SELECT 
        'Standard' as categoria,
        COUNT(DISTINCT c24.cliente_id) as total_clientes,
        SUM(CASE WHEN ut.ultima_transacao < DATE('2024-12-30', '-{dias} days') THEN 1 ELSE 0 END) as clientes_churn,
        ROUND(AVG(CASE WHEN ut.ultima_transacao < DATE('2024-12-30', '-{dias} days') THEN 1.0 ELSE 0.0 END) * 100, 2) as taxa_churn_pct
    FROM cartoes_2024 c24
    LEFT JOIN ultima_transacao_por_cliente ut ON c24.cliente_id = ut.cliente_id;
    """
    
    # Query para cart√µes 7-12 meses
    query_cartao_tempo = f"""
    WITH ultima_transacao_por_cliente AS (
        SELECT cliente_id, MAX(data) as ultima_transacao
        FROM transacoes GROUP BY cliente_id
    ),
    cartoes_2024 AS (
        SELECT DISTINCT t.cliente_id, cart.tempo_cartao_meses
        FROM transacoes t
        JOIN cartoes cart ON t.id_cartao = cart.id_cartao
        WHERE cart.data_emissao >= '2024-01-01' AND cart.data_emissao <= '2024-12-31'
          AND cart.tempo_cartao_meses BETWEEN 7 AND 12
    )
    SELECT 
        'Cart√£o 7-12m' as categoria,
        COUNT(DISTINCT c24.cliente_id) as total_clientes,
        SUM(CASE WHEN ut.ultima_transacao < DATE('2024-12-30', '-{dias} days') THEN 1 ELSE 0 END) as clientes_churn,
        ROUND(AVG(CASE WHEN ut.ultima_transacao < DATE('2024-12-30', '-{dias} days') THEN 1.0 ELSE 0.0 END) * 100, 2) as taxa_churn_pct
    FROM cartoes_2024 c24
    LEFT JOIN ultima_transacao_por_cliente ut ON c24.cliente_id = ut.cliente_id;
    """
    
    # Query para renda baixa
    query_renda_baixa = f"""
    WITH ultima_transacao_por_cliente AS (
        SELECT cliente_id, MAX(data) as ultima_transacao
        FROM transacoes GROUP BY cliente_id
    )
    SELECT 
        'Renda Baixa' as categoria,
        COUNT(c.cliente_id) as total_clientes,
        SUM(CASE WHEN ut.ultima_transacao < DATE('2024-12-30', '-{dias} days') THEN 1 ELSE 0 END) as clientes_churn,
        ROUND(AVG(CASE WHEN ut.ultima_transacao < DATE('2024-12-30', '-{dias} days') THEN 1.0 ELSE 0.0 END) * 100, 2) as taxa_churn_pct
    FROM clientes c
    LEFT JOIN ultima_transacao_por_cliente ut ON c.cliente_id = ut.cliente_id
    WHERE c.Data_Criacao_Conta >= '2024-01-01' AND c.Data_Criacao_Conta <= '2024-12-31' 
      AND ut.ultima_transacao IS NOT NULL
      AND c.renda_anual < 30000;
    """
    
    # Executar queries
    df_idade = pd.read_sql_query(query_idade, conn)
    df_standard = pd.read_sql_query(query_standard, conn)
    df_cartao = pd.read_sql_query(query_cartao_tempo, conn)
    df_renda = pd.read_sql_query(query_renda_baixa, conn)
    
    # Consolidar dados
    df_resultado = pd.concat([df_idade, df_standard, df_cartao, df_renda], ignore_index=True)
    df_resultado['periodo'] = f'{dias} dias'
    
    return df_resultado

# =============================================================================
# COLETA DE DADOS PARA OS 3 PER√çODOS
# =============================================================================

print("üìä COLETANDO DADOS COMPARATIVOS...")
print()

df_30d = obter_dados_churn(30)
df_60d = obter_dados_churn(60)
df_90d = obter_dados_churn(90)

# Consolidar todos os dados
df_completo = pd.concat([df_30d, df_60d, df_90d], ignore_index=True)

print("‚úÖ Dados coletados com sucesso!")
print(f"üìà Total de registros: {len(df_completo)}")
print()

# =============================================================================
# GR√ÅFICO 1: EVOLU√á√ÉO DAS TAXAS DE CHURN POR CATEGORIA
# =============================================================================

print("üìä CRIANDO GR√ÅFICO 1: EVOLU√á√ÉO DAS TAXAS DE CHURN")

fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
fig.suptitle('üìä EVOLU√á√ÉO DAS TAXAS DE CHURN POR PER√çODO\nCompara√ß√£o: 30, 60 e 90 dias de inatividade', 
             fontsize=16, fontweight='bold')

categorias = df_completo['categoria'].unique()
periodos = ['30 dias', '60 dias', '90 dias']
colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#FFA07A']

for i, categoria in enumerate(categorias):
    ax = [ax1, ax2, ax3, ax4][i]
    
    dados_categoria = df_completo[df_completo['categoria'] == categoria]
    taxas = []
    for periodo in periodos:
        taxa = dados_categoria[dados_categoria['periodo'] == periodo]['taxa_churn_pct'].iloc[0]
        taxas.append(taxa)
    
    bars = ax.bar(periodos, taxas, color=colors[i], alpha=0.7, edgecolor='black', linewidth=2)
    ax.set_title(f'{categoria}', fontsize=12, fontweight='bold')
    ax.set_ylabel('Taxa de Churn (%)')
    ax.grid(True, alpha=0.3)
    
    # Adicionar valores nas barras
    for j, v in enumerate(taxas):
        ax.text(j, v + max(taxas) * 0.02, f'{v:.1f}%', ha='center', va='bottom', fontweight='bold')

plt.tight_layout()
plt.savefig('grafico_evolucao_churn_periodos.png', dpi=300, bbox_inches='tight')
plt.show()

print("‚úÖ Gr√°fico salvo: grafico_evolucao_churn_periodos.png")
print()

# =============================================================================
# GR√ÅFICO 2: COMPARA√á√ÉO CONSOLIDADA
# =============================================================================

print("üìä CRIANDO GR√ÅFICO 2: COMPARA√á√ÉO CONSOLIDADA")

# Criar tabela pivot para visualiza√ß√£o
df_pivot = df_completo.pivot(index='categoria', columns='periodo', values='taxa_churn_pct')

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 8))
fig.suptitle('üìä AN√ÅLISE COMPARATIVA DE CHURN - VIS√ÉO CONSOLIDADA', 
             fontsize=16, fontweight='bold')

# Gr√°fico 1: Heatmap
sns.heatmap(df_pivot, annot=True, fmt='.1f', cmap='Reds', ax=ax1, 
            cbar_kws={'label': 'Taxa de Churn (%)'})
ax1.set_title('üî• MAPA DE CALOR - TAXAS DE CHURN')
ax1.set_xlabel('Per√≠odo de Inatividade')
ax1.set_ylabel('Categoria de Risco')

# Gr√°fico 2: Linhas de tend√™ncia
for categoria in categorias:
    dados_linha = df_completo[df_completo['categoria'] == categoria]
    periodos_num = [30, 60, 90]
    taxas_linha = []
    for periodo_num in periodos_num:
        taxa = dados_linha[dados_linha['periodo'] == f'{periodo_num} dias']['taxa_churn_pct'].iloc[0]
        taxas_linha.append(taxa)
    
    ax2.plot(periodos_num, taxas_linha, marker='o', linewidth=2, markersize=8, label=categoria)

ax2.set_title('üìà TEND√äNCIAS DE CHURN POR PER√çODO')
ax2.set_xlabel('Per√≠odo de Inatividade (dias)')
ax2.set_ylabel('Taxa de Churn (%)')
ax2.legend()
ax2.grid(True, alpha=0.3)
ax2.set_xticks([30, 60, 90])

plt.tight_layout()
plt.savefig('grafico_comparacao_consolidada_churn.png', dpi=300, bbox_inches='tight')
plt.show()

print("‚úÖ Gr√°fico salvo: grafico_comparacao_consolidada_churn.png")
print()

# =============================================================================
# AN√ÅLISE ESTAT√çSTICA E INSIGHTS
# =============================================================================

print("üìà AN√ÅLISE ESTAT√çSTICA DOS DADOS")
print("-" * 50)

# Calcular varia√ß√µes entre per√≠odos
for categoria in categorias:
    dados_cat = df_completo[df_completo['categoria'] == categoria]
    taxa_30 = dados_cat[dados_cat['periodo'] == '30 dias']['taxa_churn_pct'].iloc[0]
    taxa_60 = dados_cat[dados_cat['periodo'] == '60 dias']['taxa_churn_pct'].iloc[0]
    taxa_90 = dados_cat[dados_cat['periodo'] == '90 dias']['taxa_churn_pct'].iloc[0]
    
    variacao_30_60 = ((taxa_60 - taxa_30) / taxa_30) * 100 if taxa_30 > 0 else 0
    variacao_60_90 = ((taxa_90 - taxa_60) / taxa_60) * 100 if taxa_60 > 0 else 0
    variacao_30_90 = ((taxa_90 - taxa_30) / taxa_30) * 100 if taxa_30 > 0 else 0
    
    print(f"üìä {categoria}:")
    print(f"   ‚Ä¢ 30 dias: {taxa_30:.1f}%")
    print(f"   ‚Ä¢ 60 dias: {taxa_60:.1f}% (Œî {variacao_30_60:+.1f}%)")
    print(f"   ‚Ä¢ 90 dias: {taxa_90:.1f}% (Œî {variacao_60_90:+.1f}%)")
    print(f"   ‚Ä¢ Varia√ß√£o total (30‚Üí90): {variacao_30_90:+.1f}%")
    print()

# =============================================================================
# RELAT√ìRIO EXECUTIVO FINAL
# =============================================================================

print("="*80)
print("üìã RELAT√ìRIO EXECUTIVO - AN√ÅLISE COMPARATIVA DE CHURN")
print("="*80)
print()

print("üéØ PRINCIPAIS INSIGHTS:")
print()

print("1Ô∏è‚É£ PADR√ïES DE EVOLU√á√ÉO:")
print("   ‚Ä¢ Produtos Standard: Problem√°ticos em todos os per√≠odos")
print("   ‚Ä¢ Cart√µes 7-12 meses: Churn elevado consistente")
print("   ‚Ä¢ Idade 35-44: Crescimento gradual com o tempo")
print("   ‚Ä¢ Renda Baixa: Vulnerabilidade constante")
print()

print("2Ô∏è‚É£ VELOCIDADE DE CHURN:")
print("   ‚Ä¢ 30 dias: Detec√ß√£o precoce de abandono")
print("   ‚Ä¢ 60 dias: Ponto de equil√≠brio para an√°lise")
print("   ‚Ä¢ 90 dias: Vis√£o consolidada de longo prazo")
print()

print("3Ô∏è‚É£ RECOMENDA√á√ïES ESTRAT√âGICAS:")
print("   üö® URGENTE:")
print("     ‚Ä¢ Descontinuar produto Standard")
print("     ‚Ä¢ Interven√ß√£o em cart√µes 7-12 meses")
print()
print("   üìä MONITORAMENTO:")
print("     ‚Ä¢ Usar 60 dias como m√©trica principal")
print("     ‚Ä¢ Alertas em 30 dias para a√ß√£o r√°pida")
print("     ‚Ä¢ Relat√≥rios consolidados em 90 dias")
print()
print("   üéØ SEGMENTA√á√ÉO:")
print("     ‚Ä¢ Foco em idade 35-44 anos")
print("     ‚Ä¢ Programas especiais para renda baixa")
print("     ‚Ä¢ Benef√≠cios progressivos por tempo de relacionamento")
print()

print("üìä RESUMO DOS ARQUIVOS GERADOS:")
print("   ‚úì grafico_evolucao_churn_periodos.png")
print("   ‚úì grafico_comparacao_consolidada_churn.png")
print("   ‚úì analise_churn_2024_30dias.py")
print("   ‚úì analise_churn_2024_60dias.py")
print("   ‚úì analise_churn_2024_completa.py (90 dias)")
print()

# Salvar dados consolidados
df_completo.to_csv('dados_churn_comparativo_2024.csv', index=False)
print("üíæ Dados salvos: dados_churn_comparativo_2024.csv")
print()

# Fechar conex√£o
conn.close()

print("="*80)
print("üéØ AN√ÅLISE COMPARATIVA FINALIZADA COM SUCESSO!")
print("="*80)