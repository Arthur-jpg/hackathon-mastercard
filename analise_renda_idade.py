"""
An√°lise de Correla√ß√£o: Renda x Idade
Priceless Bank - Mastercard Challenge 2025

Objetivo: Identificar quais faixas et√°rias possuem maior poder aquisitivo
"""

import pandas as pd
import numpy as np
from datetime import datetime
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import warnings
warnings.filterwarnings('ignore')

print("="*80)
print("üí∞ AN√ÅLISE DETALHADA: RENDA x IDADE")
print("="*80)

# ============================================================================
# CARREGAR E PREPARAR DADOS
# ============================================================================
print("\nüìä Carregando dados...")

df = pd.read_csv('Base_clientes.csv')

# Converter datas e calcular idade
df['Data_Nascimento'] = pd.to_datetime(df['Data_Nascimento'], format='%d/%m/%Y', errors='coerce')
data_referencia = datetime(2025, 10, 3)
df['Idade'] = ((data_referencia - df['Data_Nascimento']).dt.days / 365.25).round(0)

# Criar faixas et√°rias detalhadas
df['Faixa_Etaria'] = pd.cut(df['Idade'], 
                             bins=[0, 25, 30, 35, 40, 45, 50, 55, 60, 65, 100],
                             labels=['18-25', '26-30', '31-35', '36-40', '41-45', 
                                    '46-50', '51-55', '56-60', '61-65', '65+'])

# Remover valores nulos
df_analise = df[['Cliente_ID', 'Idade', 'Renda_Anual', 'Faixa_Etaria', 'Estado', 'Cidade', 'Numero_Cartoes']].dropna()

print(f"‚úì {len(df_analise):,} clientes com dados completos\n")

# ============================================================================
# 1. AN√ÅLISE DE CORRELA√á√ÉO
# ============================================================================
print("="*80)
print("üîç CORRELA√á√ÉO ENTRE RENDA E IDADE")
print("="*80)

correlacao = df_analise['Renda_Anual'].corr(df_analise['Idade'])
print(f"\nüìä Coeficiente de Correla√ß√£o de Pearson: {correlacao:.4f}")

if abs(correlacao) < 0.1:
    interpretacao = "MUITO FRACA - Praticamente sem rela√ß√£o linear"
elif abs(correlacao) < 0.3:
    interpretacao = "FRACA - Pouca rela√ß√£o linear"
elif abs(correlacao) < 0.5:
    interpretacao = "MODERADA - Rela√ß√£o linear moderada"
elif abs(correlacao) < 0.7:
    interpretacao = "FORTE - Forte rela√ß√£o linear"
else:
    interpretacao = "MUITO FORTE - Rela√ß√£o linear muito forte"

print(f"Interpreta√ß√£o: {interpretacao}")

if correlacao > 0:
    print("\nüí° Tend√™ncia: Quanto MAIOR a idade, MAIOR tende a ser a renda")
elif correlacao < 0:
    print("\nüí° Tend√™ncia: Quanto MAIOR a idade, MENOR tende a ser a renda")
else:
    print("\nüí° N√£o h√° rela√ß√£o linear entre idade e renda")

# ============================================================================
# 2. RENDA M√âDIA POR FAIXA ET√ÅRIA
# ============================================================================
print("\n" + "="*80)
print("üí∞ RENDA M√âDIA POR FAIXA ET√ÅRIA")
print("="*80)

renda_por_faixa = df_analise.groupby('Faixa_Etaria').agg({
    'Renda_Anual': ['mean', 'median', 'std', 'count']
}).round(2)

renda_por_faixa.columns = ['Renda_M√©dia', 'Renda_Mediana', 'Desvio_Padr√£o', 'Num_Clientes']
renda_por_faixa = renda_por_faixa.sort_values('Renda_M√©dia', ascending=False)

print("\nüìä Ranking das Faixas Et√°rias por Renda M√©dia:")
print(renda_por_faixa.to_string())

# Identificar faixa com maior renda
faixa_mais_rica = renda_por_faixa.index[0]
renda_mais_alta = renda_por_faixa.iloc[0]['Renda_M√©dia']

print(f"\nüèÜ FAIXA ET√ÅRIA MAIS RICA: {faixa_mais_rica} anos")
print(f"   üíµ Renda M√©dia: R$ {renda_mais_alta:,.2f}")
print(f"   üë• N√∫mero de Clientes: {int(renda_por_faixa.iloc[0]['Num_Clientes'])}")

# Faixa com menor renda
faixa_mais_pobre = renda_por_faixa.index[-1]
renda_mais_baixa = renda_por_faixa.iloc[-1]['Renda_M√©dia']

print(f"\nüìâ FAIXA ET√ÅRIA COM MENOR RENDA: {faixa_mais_pobre} anos")
print(f"   üíµ Renda M√©dia: R$ {renda_mais_baixa:,.2f}")
print(f"   üë• N√∫mero de Clientes: {int(renda_por_faixa.iloc[-1]['Num_Clientes'])}")

diferenca_percentual = ((renda_mais_alta - renda_mais_baixa) / renda_mais_baixa * 100)
print(f"\nüìà Diferen√ßa: A faixa mais rica ganha {diferenca_percentual:.1f}% a mais que a mais pobre")

# ============================================================================
# 3. DISTRIBUI√á√ÉO DE RENDA POR IDADE EXATA
# ============================================================================
print("\n" + "="*80)
print("üéØ TOP 10 IDADES COM MAIOR RENDA M√âDIA")
print("="*80)

renda_por_idade = df_analise.groupby('Idade').agg({
    'Renda_Anual': ['mean', 'count']
}).round(2)
renda_por_idade.columns = ['Renda_M√©dia', 'Num_Clientes']
renda_por_idade = renda_por_idade[renda_por_idade['Num_Clientes'] >= 5]  # Pelo menos 5 clientes
renda_por_idade = renda_por_idade.sort_values('Renda_M√©dia', ascending=False)

print("\nüìä Top 10 Idades Espec√≠ficas com Maior Renda:")
for idx, (idade, row) in enumerate(renda_por_idade.head(10).iterrows(), 1):
    print(f"{idx:2d}. {int(idade)} anos ‚Üí R$ {row['Renda_M√©dia']:>12,.2f} ({int(row['Num_Clientes'])} clientes)")

# ============================================================================
# 4. CLIENTES DE ALTA RENDA (TOP 10%)
# ============================================================================
print("\n" + "="*80)
print("üíé PERFIL DOS CLIENTES DE ALTA RENDA (TOP 10%)")
print("="*80)

percentil_90 = df_analise['Renda_Anual'].quantile(0.90)
clientes_ricos = df_analise[df_analise['Renda_Anual'] >= percentil_90]

print(f"\nüí∞ Renda m√≠nima para TOP 10%: R$ {percentil_90:,.2f}")
print(f"üë• Quantidade de clientes: {len(clientes_ricos)}")
print(f"\nüìä Perfil dos Clientes de Alta Renda:")
print(f"   ‚Ä¢ Idade M√©dia: {clientes_ricos['Idade'].mean():.1f} anos")
print(f"   ‚Ä¢ Idade Mediana: {clientes_ricos['Idade'].median():.0f} anos")
print(f"   ‚Ä¢ Renda M√©dia: R$ {clientes_ricos['Renda_Anual'].mean():,.2f}")
print(f"   ‚Ä¢ Cart√µes M√©dio: {clientes_ricos['Numero_Cartoes'].mean():.1f}")

print(f"\nüéÇ Distribui√ß√£o Et√°ria dos Ricos (TOP 10%):")
dist_ricos = clientes_ricos['Faixa_Etaria'].value_counts().sort_index()
for faixa, count in dist_ricos.items():
    pct = (count / len(clientes_ricos)) * 100
    print(f"   ‚Ä¢ {faixa} anos: {count} clientes ({pct:.1f}%)")

# ============================================================================
# 5. AN√ÅLISE POR ESTADO
# ============================================================================
print("\n" + "="*80)
print("üó∫Ô∏è RENDA x IDADE POR ESTADO")
print("="*80)

print("\nüìä Renda M√©dia e Idade M√©dia por Estado:")
por_estado = df_analise.groupby('Estado').agg({
    'Renda_Anual': 'mean',
    'Idade': 'mean',
    'Cliente_ID': 'count'
}).round(2)
por_estado.columns = ['Renda_M√©dia', 'Idade_M√©dia', 'Num_Clientes']
por_estado = por_estado.sort_values('Renda_M√©dia', ascending=False)

for estado, row in por_estado.iterrows():
    print(f"\n{estado}:")
    print(f"   üíµ Renda M√©dia: R$ {row['Renda_M√©dia']:,.2f}")
    print(f"   üéÇ Idade M√©dia: {row['Idade_M√©dia']:.1f} anos")
    print(f"   üë• Clientes: {int(row['Num_Clientes'])}")

# ============================================================================
# 6. VISUALIZA√á√ïES INTERATIVAS
# ============================================================================
print("\n" + "="*80)
print("üìä GERANDO VISUALIZA√á√ïES INTERATIVAS")
print("="*80)

# 1. Scatter plot Renda x Idade
fig1 = px.scatter(
    df_analise,
    x='Idade',
    y='Renda_Anual',
    color='Estado',
    size='Numero_Cartoes',
    hover_data=['Cidade'],
    title='üí∞ Correla√ß√£o: Renda x Idade (tamanho = n√∫mero de cart√µes)',
    labels={'Idade': 'Idade (anos)', 'Renda_Anual': 'Renda Anual (R$)'},
    height=600
)
fig1.write_html('correlacao_renda_idade_scatter.html')
print("\n‚úì Gr√°fico salvo: correlacao_renda_idade_scatter.html")

# 2. Box plot Renda por Faixa Et√°ria
fig2 = go.Figure()
for faixa in sorted(df_analise['Faixa_Etaria'].dropna().unique()):
    dados_faixa = df_analise[df_analise['Faixa_Etaria'] == faixa]['Renda_Anual']
    fig2.add_trace(go.Box(
        y=dados_faixa,
        name=str(faixa),
        boxmean='sd'
    ))

fig2.update_layout(
    title='üìä Distribui√ß√£o de Renda por Faixa Et√°ria (Box Plot)',
    yaxis_title='Renda Anual (R$)',
    xaxis_title='Faixa Et√°ria',
    height=600
)
fig2.write_html('distribuicao_renda_faixa_etaria.html')
print("‚úì Gr√°fico salvo: distribuicao_renda_faixa_etaria.html")

# 3. Gr√°fico de barras - Renda M√©dia por Faixa Et√°ria
fig3 = go.Figure()

renda_por_faixa_sorted = df_analise.groupby('Faixa_Etaria')['Renda_Anual'].mean().sort_index()

fig3.add_trace(go.Bar(
    x=renda_por_faixa_sorted.index.astype(str),
    y=renda_por_faixa_sorted.values,
    marker_color='rgb(55, 128, 191)',
    text=[f'R$ {val:,.0f}' for val in renda_por_faixa_sorted.values],
    textposition='outside'
))

fig3.update_layout(
    title='üíµ Renda M√©dia por Faixa Et√°ria',
    xaxis_title='Faixa Et√°ria',
    yaxis_title='Renda M√©dia Anual (R$)',
    height=600
)
fig3.write_html('renda_media_faixa_etaria.html')
print("‚úì Gr√°fico salvo: renda_media_faixa_etaria.html")

# 4. Heatmap Renda M√©dia por Estado e Faixa Et√°ria
pivot_renda = df_analise.pivot_table(
    values='Renda_Anual',
    index='Estado',
    columns='Faixa_Etaria',
    aggfunc='mean'
).round(0)

fig4 = go.Figure(data=go.Heatmap(
    z=pivot_renda.values,
    x=pivot_renda.columns.astype(str),
    y=pivot_renda.index,
    colorscale='RdYlGn',
    text=pivot_renda.values.astype(int),
    texttemplate='R$%{text}',
    textfont={"size": 10},
    colorbar=dict(title="Renda M√©dia<br>(R$)")
))

fig4.update_layout(
    title='üî• Heatmap: Renda M√©dia por Estado e Faixa Et√°ria',
    xaxis_title='Faixa Et√°ria',
    yaxis_title='Estado',
    height=500
)
fig4.write_html('heatmap_renda_estado_idade.html')
print("‚úì Gr√°fico salvo: heatmap_renda_estado_idade.html")

# 5. Histograma 2D - Densidade de Renda x Idade
fig5 = go.Figure(go.Histogram2d(
    x=df_analise['Idade'],
    y=df_analise['Renda_Anual'],
    colorscale='Viridis',
    nbinsx=30,
    nbinsy=30
))

fig5.update_layout(
    title='üé® Densidade: Concentra√ß√£o de Clientes por Renda e Idade',
    xaxis_title='Idade (anos)',
    yaxis_title='Renda Anual (R$)',
    height=600
)
fig5.write_html('densidade_renda_idade.html')
print("‚úì Gr√°fico salvo: densidade_renda_idade.html")

# 6. Compara√ß√£o: TOP 10% vs Resto
fig6 = make_subplots(
    rows=1, cols=2,
    subplot_titles=('Distribui√ß√£o de Idade - TOP 10%', 'Distribui√ß√£o de Idade - Demais 90%'),
    specs=[[{'type': 'histogram'}, {'type': 'histogram'}]]
)

outros_clientes = df_analise[df_analise['Renda_Anual'] < percentil_90]

fig6.add_trace(
    go.Histogram(x=clientes_ricos['Idade'], name='TOP 10%', marker_color='gold', nbinsx=20),
    row=1, col=1
)

fig6.add_trace(
    go.Histogram(x=outros_clientes['Idade'], name='Demais 90%', marker_color='lightblue', nbinsx=20),
    row=1, col=2
)

fig6.update_layout(
    title_text='üëë Compara√ß√£o de Distribui√ß√£o Et√°ria: Ricos vs Demais',
    height=500,
    showlegend=False
)
fig6.write_html('comparacao_idade_ricos_vs_outros.html')
print("‚úì Gr√°fico salvo: comparacao_idade_ricos_vs_outros.html")

# ============================================================================
# 7. INSIGHTS ESTRAT√âGICOS
# ============================================================================
print("\n" + "="*80)
print("üí° INSIGHTS ESTRAT√âGICOS - QUEM TEM MAIS DINHEIRO?")
print("="*80)

print("\nüéØ CONCLUS√ïES PRINCIPAIS:\n")

print(f"1. PERFIL DE ALTA RENDA:")
print(f"   ‚Ä¢ Faixa et√°ria predominante: {faixa_mais_rica} anos")
print(f"   ‚Ä¢ Renda m√©dia nesta faixa: R$ {renda_mais_alta:,.2f}")
print(f"   ‚Ä¢ Idade m√©dia dos 10% mais ricos: {clientes_ricos['Idade'].mean():.1f} anos")

print(f"\n2. CORRELA√á√ÉO IDADE-RENDA:")
if abs(correlacao) < 0.1:
    print(f"   ‚Ä¢ A idade N√ÉO √© um bom preditor de renda (correla√ß√£o: {correlacao:.4f})")
    print(f"   ‚Ä¢ Clientes de todas as idades podem ter alta renda")
else:
    print(f"   ‚Ä¢ Correla√ß√£o: {correlacao:.4f} ({interpretacao})")

print(f"\n3. DISTRIBUI√á√ÉO GEOGR√ÅFICA:")
estado_mais_rico = por_estado.index[0]
print(f"   ‚Ä¢ Estado com maior renda m√©dia: {estado_mais_rico}")
print(f"   ‚Ä¢ Renda m√©dia em {estado_mais_rico}: R$ {por_estado.loc[estado_mais_rico, 'Renda_M√©dia']:,.2f}")

print(f"\n4. OPORTUNIDADES DE NEG√ìCIO:")
print(f"   ‚Ä¢ Focar produtos premium nas faixas: {', '.join([str(f) for f in renda_por_faixa.head(3).index])}")
print(f"   ‚Ä¢ {len(clientes_ricos)} clientes (TOP 10%) representam potencial de alta margem")
print(f"   ‚Ä¢ Estados priorit√°rios: {', '.join(por_estado.head(3).index)}")

# ============================================================================
# 8. EXPORTAR DADOS
# ============================================================================
print("\n" + "="*80)
print("üíæ EXPORTANDO DADOS")
print("="*80)

# Salvar an√°lise por faixa et√°ria
renda_por_faixa.to_csv('analise_renda_por_faixa_etaria.csv', encoding='utf-8-sig')
print("\n‚úì Arquivo salvo: analise_renda_por_faixa_etaria.csv")

# Salvar clientes de alta renda
clientes_ricos_export = df_analise[df_analise['Renda_Anual'] >= percentil_90].copy()
clientes_ricos_export.to_csv('clientes_alta_renda_top10.csv', index=False, encoding='utf-8-sig')
print("‚úì Arquivo salvo: clientes_alta_renda_top10.csv")

# Salvar an√°lise por estado
por_estado.to_csv('renda_idade_por_estado.csv', encoding='utf-8-sig')
print("‚úì Arquivo salvo: renda_idade_por_estado.csv")

print("\n" + "="*80)
print("‚úÖ AN√ÅLISE COMPLETA!")
print("="*80)

print("\nüìÇ Arquivos HTML gerados (abra no navegador):")
print("   ‚Ä¢ correlacao_renda_idade_scatter.html")
print("   ‚Ä¢ distribuicao_renda_faixa_etaria.html")
print("   ‚Ä¢ renda_media_faixa_etaria.html")
print("   ‚Ä¢ heatmap_renda_estado_idade.html")
print("   ‚Ä¢ densidade_renda_idade.html")
print("   ‚Ä¢ comparacao_idade_ricos_vs_outros.html")

print("\nüìä Arquivos CSV gerados:")
print("   ‚Ä¢ analise_renda_por_faixa_etaria.csv")
print("   ‚Ä¢ clientes_alta_renda_top10.csv")
print("   ‚Ä¢ renda_idade_por_estado.csv")

print("\n" + "="*80)
