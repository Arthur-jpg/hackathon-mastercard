"""
An√°lise e Segmenta√ß√£o de Clientes - Priceless Bank
Mastercard Challenge 2025

Este script realiza a an√°lise completa de segmenta√ß√£o de clientes
utilizando dados demogr√°ficos e machine learning.
"""

# ============================================================================
# 1. IMPORTAR BIBLIOTECAS
# ============================================================================
print("üîÑ Importando bibliotecas...")

import pandas as pd
import numpy as np
from datetime import datetime
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
import warnings
warnings.filterwarnings('ignore')

# Configura√ß√µes de visualiza√ß√£o
sns.set_palette('husl')
plt.rcParams['figure.figsize'] = (12, 6)

print("‚úì Bibliotecas importadas com sucesso!\n")

# ============================================================================
# 2. CARREGAR E EXPLORAR DADOS
# ============================================================================
print("="*80)
print("üìä CARREGANDO BASE DE DADOS")
print("="*80)

df_clientes = pd.read_csv('Base_clientes.csv')

print(f"\nüìä Total de clientes: {len(df_clientes):,}")
print(f"üìã Colunas dispon√≠veis: {list(df_clientes.columns)}")
print("\n" + "="*80)
print("Primeiras 10 linhas:")
print(df_clientes.head(10))

# Informa√ß√µes do dataset
print("\n" + "="*80)
print("üìà INFORMA√á√ïES DO DATASET:")
print("="*80)
df_clientes.info()

print("\n" + "="*80)
print("üìä ESTAT√çSTICAS DESCRITIVAS:")
print("="*80)
print(df_clientes.describe())

# Valores ausentes
print("\n" + "="*80)
print("‚ùì VALORES AUSENTES POR COLUNA:")
print("="*80)
missing_data = pd.DataFrame({
    'Total Missing': df_clientes.isnull().sum(),
    'Percentual (%)': (df_clientes.isnull().sum() / len(df_clientes) * 100).round(2)
})
missing_data = missing_data[missing_data['Total Missing'] > 0].sort_values('Total Missing', ascending=False)
print(missing_data)

# ============================================================================
# 3. PREPARA√á√ÉO E ENGENHARIA DE FEATURES
# ============================================================================
print("\n" + "="*80)
print("üîß PREPARA√á√ÉO E ENGENHARIA DE FEATURES")
print("="*80)

df = df_clientes.copy()

# Converter datas
df['Data_Nascimento'] = pd.to_datetime(df['Data_Nascimento'], format='%d/%m/%Y', errors='coerce')
df['Data_Criacao_Conta'] = pd.to_datetime(df['Data_Criacao_Conta'], errors='coerce')

# Calcular idade atual
data_referencia = datetime(2025, 10, 3)
df['Idade'] = ((data_referencia - df['Data_Nascimento']).dt.days / 365.25).round(0)

# Calcular tempo como cliente
df['Tempo_Cliente_Anos'] = ((data_referencia - df['Data_Criacao_Conta']).dt.days / 365.25).round(2)

# Criar faixas et√°rias
df['Faixa_Etaria'] = pd.cut(df['Idade'], 
                             bins=[0, 25, 35, 45, 55, 65, 100],
                             labels=['18-25', '26-35', '36-45', '46-55', '56-65', '65+'])

# Criar faixas de renda
df['Faixa_Renda'] = pd.cut(df['Renda_Anual'], 
                            bins=[0, 30000, 50000, 80000, 120000, np.inf],
                            labels=['At√© 30k', '30k-50k', '50k-80k', '80k-120k', 'Acima 120k'])

# Converter conta adicional para bin√°rio
df['Possui_Conta_Adicional_Bin'] = df['Possui_Conta_Adicional'].map({'Sim': 1, 'N√£o': 0})

print(f"\n‚úì Features criadas com sucesso!")
print(f"üìä Dataset atualizado: {df.shape[0]} linhas x {df.shape[1]} colunas\n")

# ============================================================================
# 4. AN√ÅLISE DEMOGR√ÅFICA - IDADE
# ============================================================================
print("="*80)
print("üìä AN√ÅLISE DEMOGR√ÅFICA - IDADE")
print("="*80)

print("\nüìà Estat√≠sticas de Idade:")
print(f"  ‚Ä¢ Idade M√©dia: {df['Idade'].mean():.1f} anos")
print(f"  ‚Ä¢ Idade Mediana: {df['Idade'].median():.1f} anos")
print(f"  ‚Ä¢ Idade M√≠nima: {df['Idade'].min():.0f} anos")
print(f"  ‚Ä¢ Idade M√°xima: {df['Idade'].max():.0f} anos")
print(f"  ‚Ä¢ Desvio Padr√£o: {df['Idade'].std():.1f} anos")

print("\nüìä Distribui√ß√£o por Faixa Et√°ria:")
print(df['Faixa_Etaria'].value_counts().sort_index())

# Visualiza√ß√£o
fig = make_subplots(
    rows=2, cols=2,
    subplot_titles=('Distribui√ß√£o de Idade', 'Box Plot - Idade', 
                    'Distribui√ß√£o por Faixa Et√°ria', 'Idade M√©dia por Estado'),
    specs=[[{'type': 'histogram'}, {'type': 'box'}],
           [{'type': 'bar'}, {'type': 'bar'}]]
)

fig.add_trace(
    go.Histogram(x=df['Idade'].dropna(), nbinsx=30, name='Idade',
                marker_color='rgb(55, 83, 109)'),
    row=1, col=1
)

fig.add_trace(
    go.Box(y=df['Idade'].dropna(), name='Idade', marker_color='rgb(26, 118, 255)'),
    row=1, col=2
)

faixa_etaria_count = df['Faixa_Etaria'].value_counts().sort_index()
fig.add_trace(
    go.Bar(x=faixa_etaria_count.index.astype(str), y=faixa_etaria_count.values,
          marker_color='rgb(50, 171, 96)', name='Faixa Et√°ria'),
    row=2, col=1
)

idade_por_estado = df.groupby('Estado')['Idade'].mean().sort_values(ascending=False)
fig.add_trace(
    go.Bar(x=idade_por_estado.index, y=idade_por_estado.values,
          marker_color='rgb(219, 64, 82)', name='Idade M√©dia'),
    row=2, col=2
)

fig.update_layout(height=800, showlegend=False, title_text="üìä An√°lise Completa - Idade dos Clientes")
fig.write_html('analise_idade.html')
print("\n‚úì Gr√°fico salvo: analise_idade.html")

# ============================================================================
# 5. AN√ÅLISE DEMOGR√ÅFICA - RENDA
# ============================================================================
print("\n" + "="*80)
print("üí∞ AN√ÅLISE DEMOGR√ÅFICA - RENDA")
print("="*80)

print("\nüíµ Estat√≠sticas de Renda Anual:")
print(f"  ‚Ä¢ Renda M√©dia: R$ {df['Renda_Anual'].mean():,.2f}")
print(f"  ‚Ä¢ Renda Mediana: R$ {df['Renda_Anual'].median():,.2f}")
print(f"  ‚Ä¢ Renda M√≠nima: R$ {df['Renda_Anual'].min():,.2f}")
print(f"  ‚Ä¢ Renda M√°xima: R$ {df['Renda_Anual'].max():,.2f}")
print(f"  ‚Ä¢ Desvio Padr√£o: R$ {df['Renda_Anual'].std():,.2f}")

print("\nüìä Distribui√ß√£o por Faixa de Renda:")
print(df['Faixa_Renda'].value_counts().sort_index())

# Visualiza√ß√£o
fig = make_subplots(
    rows=2, cols=2,
    subplot_titles=('Distribui√ß√£o de Renda Anual', 'Box Plot - Renda', 
                    'Distribui√ß√£o por Faixa de Renda', 'Renda M√©dia por Estado'),
    specs=[[{'type': 'histogram'}, {'type': 'box'}],
           [{'type': 'bar'}, {'type': 'bar'}]]
)

fig.add_trace(
    go.Histogram(x=df['Renda_Anual'].dropna(), nbinsx=40, name='Renda',
                marker_color='rgb(55, 128, 191)'),
    row=1, col=1
)

fig.add_trace(
    go.Box(y=df['Renda_Anual'].dropna(), name='Renda', marker_color='rgb(128, 0, 128)'),
    row=1, col=2
)

faixa_renda_count = df['Faixa_Renda'].value_counts().sort_index()
fig.add_trace(
    go.Bar(x=faixa_renda_count.index.astype(str), y=faixa_renda_count.values,
          marker_color='rgb(255, 144, 14)', name='Faixa Renda'),
    row=2, col=1
)

renda_por_estado = df.groupby('Estado')['Renda_Anual'].mean().sort_values(ascending=False)
fig.add_trace(
    go.Bar(x=renda_por_estado.index, y=renda_por_estado.values,
          marker_color='rgb(44, 160, 101)', name='Renda M√©dia'),
    row=2, col=2
)

fig.update_layout(height=800, showlegend=False, title_text="üí∞ An√°lise Completa - Renda dos Clientes")
fig.write_html('analise_renda.html')
print("\n‚úì Gr√°fico salvo: analise_renda.html")

# ============================================================================
# 6. AN√ÅLISE DEMOGR√ÅFICA - LOCALIZA√á√ÉO
# ============================================================================
print("\n" + "="*80)
print("üó∫Ô∏è AN√ÅLISE DEMOGR√ÅFICA - LOCALIZA√á√ÉO")
print("="*80)

print(f"\nüåé Estat√≠sticas Geogr√°ficas:")
print(f"  ‚Ä¢ Total de Estados: {df['Estado'].nunique()}")
print(f"  ‚Ä¢ Total de Cidades: {df['Cidade'].nunique()}")

print("\nüìä Top 5 Estados por n√∫mero de clientes:")
estado_count = df['Estado'].value_counts()
print(estado_count.head())

print("\nüìä Top 10 Cidades:")
print(df['Cidade'].value_counts().head(10))

# Visualiza√ß√£o
fig = make_subplots(
    rows=2, cols=2,
    subplot_titles=('Top 10 Cidades', 'Distribui√ß√£o por Estado', 
                    'Clientes por Estado (Pizza)', 'Renda M√©dia vs Clientes por Estado'),
    specs=[[{'type': 'bar'}, {'type': 'bar'}],
           [{'type': 'pie'}, {'type': 'scatter'}]]
)

top_cidades = df['Cidade'].value_counts().head(10)
fig.add_trace(
    go.Bar(y=top_cidades.index, x=top_cidades.values, orientation='h',
          marker_color='rgb(158, 202, 225)', name='Cidades'),
    row=1, col=1
)

fig.add_trace(
    go.Bar(x=estado_count.index, y=estado_count.values,
          marker_color='rgb(94, 204, 243)', name='Estados'),
    row=1, col=2
)

fig.add_trace(
    go.Pie(labels=estado_count.index, values=estado_count.values),
    row=2, col=1
)

estado_stats = df.groupby('Estado').agg({
    'Cliente_ID': 'count',
    'Renda_Anual': 'mean'
}).reset_index()
estado_stats.columns = ['Estado', 'Num_Clientes', 'Renda_Media']

fig.add_trace(
    go.Scatter(x=estado_stats['Num_Clientes'], y=estado_stats['Renda_Media'],
              mode='markers+text', text=estado_stats['Estado'],
              textposition='top center',
              marker=dict(size=15, color='rgb(255, 127, 14)'),
              name='Estados'),
    row=2, col=2
)

fig.update_layout(height=900, showlegend=False, title_text="üó∫Ô∏è An√°lise Geogr√°fica dos Clientes")
fig.write_html('analise_localizacao.html')
print("\n‚úì Gr√°fico salvo: analise_localizacao.html")

# ============================================================================
# 7. AN√ÅLISE DE CORRELA√á√ÉO
# ============================================================================
print("\n" + "="*80)
print("üîó AN√ÅLISE DE CORRELA√á√ÉO")
print("="*80)

correlation_vars = ['Idade', 'Renda_Anual', 'Numero_Cartoes', 
                    'Possui_Conta_Adicional_Bin', 'Tempo_Cliente_Anos']
corr_matrix = df[correlation_vars].corr()

print("\nüîç Principais Correla√ß√µes:")
corr_pairs = []
for i in range(len(corr_matrix.columns)):
    for j in range(i+1, len(corr_matrix.columns)):
        corr_pairs.append((
            corr_matrix.columns[i],
            corr_matrix.columns[j],
            corr_matrix.iloc[i, j]
        ))
corr_pairs_sorted = sorted(corr_pairs, key=lambda x: abs(x[2]), reverse=True)
for var1, var2, corr in corr_pairs_sorted[:5]:
    print(f"  ‚Ä¢ {var1} <-> {var2}: {corr:.3f}")

# Visualiza√ß√£o
fig = go.Figure(data=go.Heatmap(
    z=corr_matrix.values,
    x=corr_matrix.columns,
    y=corr_matrix.columns,
    colorscale='RdBu',
    zmid=0,
    text=corr_matrix.values.round(2),
    texttemplate='%{text}',
    textfont={"size": 10},
    colorbar=dict(title="Correla√ß√£o")
))

fig.update_layout(
    title='üîó Matriz de Correla√ß√£o entre Vari√°veis',
    height=600,
    xaxis_title='',
    yaxis_title=''
)
fig.write_html('analise_correlacao.html')
print("\n‚úì Gr√°fico salvo: analise_correlacao.html")

# ============================================================================
# 8. SEGMENTA√á√ÉO - K-MEANS CLUSTERING
# ============================================================================
print("\n" + "="*80)
print("üéØ SEGMENTA√á√ÉO DE CLIENTES - K-MEANS CLUSTERING")
print("="*80)

# Preparar dados para clustering
df_cluster = df[['Idade', 'Renda_Anual', 'Numero_Cartoes', 
                 'Possui_Conta_Adicional_Bin', 'Tempo_Cliente_Anos']].dropna()

print(f"\nüìä Clientes com dados completos para clustering: {len(df_cluster):,}")

# Padronizar os dados
scaler = StandardScaler()
df_scaled = scaler.fit_transform(df_cluster)

# M√©todo do cotovelo
print("\nüîç Determinando n√∫mero √≥timo de clusters...")
inertias = []
K_range = range(2, 11)

for k in K_range:
    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)
    kmeans.fit(df_scaled)
    inertias.append(kmeans.inertia_)

# Plotar m√©todo do cotovelo
fig = go.Figure()
fig.add_trace(go.Scatter(
    x=list(K_range),
    y=inertias,
    mode='lines+markers',
    marker=dict(size=10, color='rgb(55, 83, 109)'),
    line=dict(color='rgb(55, 83, 109)', width=2)
))

fig.update_layout(
    title='üìà M√©todo do Cotovelo - Determina√ß√£o do N√∫mero √ìtimo de Clusters',
    xaxis_title='N√∫mero de Clusters',
    yaxis_title='In√©rcia (Within-Cluster Sum of Squares)',
    height=500
)
fig.write_html('metodo_cotovelo.html')
print("‚úì Gr√°fico salvo: metodo_cotovelo.html")

# Aplicar K-Means com 5 clusters
n_clusters = 5
kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
df_cluster['Segmento'] = kmeans.fit_predict(df_scaled)

# Adicionar segmentos ao dataframe original
df_with_segments = df.copy()
df_with_segments.loc[df_cluster.index, 'Segmento'] = df_cluster['Segmento']

print(f"\n‚úì Segmenta√ß√£o conclu√≠da! {n_clusters} segmentos identificados.")
print(f"\nüìä Distribui√ß√£o de Clientes por Segmento:")
segment_dist = df_cluster['Segmento'].value_counts().sort_index()
for seg, count in segment_dist.items():
    pct = (count / len(df_cluster)) * 100
    print(f"  ‚Ä¢ Segmento {seg}: {count:,} clientes ({pct:.1f}%)")

# ============================================================================
# 9. VISUALIZA√á√ÉO DOS SEGMENTOS
# ============================================================================
print("\n" + "="*80)
print("üìä VISUALIZA√á√ÉO DOS SEGMENTOS")
print("="*80)

# PCA para visualiza√ß√£o 2D
pca = PCA(n_components=2)
df_pca = pca.fit_transform(df_scaled)
df_cluster['PCA1'] = df_pca[:, 0]
df_cluster['PCA2'] = df_pca[:, 1]

fig = px.scatter(
    df_cluster,
    x='PCA1',
    y='PCA2',
    color='Segmento',
    title='üéØ Visualiza√ß√£o dos Segmentos (PCA 2D)',
    labels={'PCA1': f'PC1 ({pca.explained_variance_ratio_[0]:.1%} vari√¢ncia)',
            'PCA2': f'PC2 ({pca.explained_variance_ratio_[1]:.1%} vari√¢ncia)'},
    color_continuous_scale='Viridis',
    height=600
)
fig.update_traces(marker=dict(size=8, opacity=0.7))
fig.write_html('segmentos_pca_2d.html')
print("\n‚úì Gr√°fico salvo: segmentos_pca_2d.html")

# Visualiza√ß√£o 3D
fig = px.scatter_3d(
    df_cluster,
    x='Idade',
    y='Renda_Anual',
    z='Numero_Cartoes',
    color='Segmento',
    title='üéØ Visualiza√ß√£o 3D dos Segmentos (Idade x Renda x Cart√µes)',
    color_continuous_scale='Plasma',
    height=700,
    opacity=0.7
)
fig.update_traces(marker=dict(size=5))
fig.write_html('segmentos_3d.html')
print("‚úì Gr√°fico salvo: segmentos_3d.html")

# ============================================================================
# 10. PERFIL DETALHADO DOS SEGMENTOS
# ============================================================================
print("\n" + "="*80)
print("üìã PERFIL DETALHADO DOS SEGMENTOS")
print("="*80)

segment_profile = df_cluster.groupby('Segmento').agg({
    'Idade': ['mean', 'std'],
    'Renda_Anual': ['mean', 'std'],
    'Numero_Cartoes': ['mean'],
    'Possui_Conta_Adicional_Bin': 'mean',
    'Tempo_Cliente_Anos': 'mean'
}).round(2)

segment_profile.columns = ['Idade_M√©dia', 'Idade_Desvio', 'Renda_M√©dia', 'Renda_Desvio',
                           'Cart√µes_M√©dia', 'Pct_Conta_Adicional', 'Tempo_M√©dio_Anos']

segment_profile['Num_Clientes'] = df_cluster['Segmento'].value_counts().sort_index()
segment_profile['Pct_Total'] = (segment_profile['Num_Clientes'] / len(df_cluster) * 100).round(1)

print("\n" + segment_profile.to_string())

print("\n\nüéØ CARACTERIZA√á√ÉO DOS SEGMENTOS:\n")

for seg in sorted(df_cluster['Segmento'].unique()):
    seg_data = segment_profile.loc[seg]
    
    print(f"\n{'='*80}")
    print(f"SEGMENTO {seg}")
    print(f"{'='*80}")
    print(f"üë• Tamanho: {seg_data['Num_Clientes']:,.0f} clientes ({seg_data['Pct_Total']:.1f}% do total)")
    print(f"\nüìä Perfil Demogr√°fico:")
    print(f"   ‚Ä¢ Idade M√©dia: {seg_data['Idade_M√©dia']:.0f} anos (¬± {seg_data['Idade_Desvio']:.1f})")
    print(f"   ‚Ä¢ Renda M√©dia: R$ {seg_data['Renda_M√©dia']:,.2f} (¬± R$ {seg_data['Renda_Desvio']:,.2f})")
    print(f"   ‚Ä¢ Cart√µes por Cliente: {seg_data['Cart√µes_M√©dia']:.1f} em m√©dia")
    print(f"   ‚Ä¢ Conta Adicional: {seg_data['Pct_Conta_Adicional']*100:.1f}% possuem")
    print(f"   ‚Ä¢ Tempo M√©dio como Cliente: {seg_data['Tempo_M√©dio_Anos']:.1f} anos")
    
    seg_geo = df_with_segments[df_with_segments['Segmento'] == seg]
    top_estado = seg_geo['Estado'].mode()[0] if len(seg_geo) > 0 else 'N/A'
    top_cidade = seg_geo['Cidade'].mode()[0] if len(seg_geo) > 0 else 'N/A'
    print(f"\nüó∫Ô∏è Localiza√ß√£o:")
    print(f"   ‚Ä¢ Estado predominante: {top_estado}")
    print(f"   ‚Ä¢ Cidade predominante: {top_cidade}")

# ============================================================================
# 11. SUM√ÅRIO EXECUTIVO
# ============================================================================
print("\n\n" + "="*80)
print("üéØ SUM√ÅRIO EXECUTIVO - SEGMENTA√á√ÉO DE CLIENTES PRICELESS BANK")
print("="*80)

print(f"\nüìä VIS√ÉO GERAL:")
print(f"   ‚Ä¢ Total de Clientes Analisados: {len(df_cluster):,}")
print(f"   ‚Ä¢ N√∫mero de Segmentos Identificados: {n_clusters}")
print(f"   ‚Ä¢ Taxa de Dados Completos: {(len(df_cluster)/len(df)*100):.1f}%")

print(f"\nüíº PRINCIPAIS ACHADOS:")
seg_maior_renda = segment_profile['Renda_M√©dia'].idxmax()
print(f"   ‚Ä¢ Segmento de Maior Renda: Segmento {seg_maior_renda} (R$ {segment_profile.loc[seg_maior_renda, 'Renda_M√©dia']:,.2f})")

seg_maior_base = segment_profile['Num_Clientes'].idxmax()
print(f"   ‚Ä¢ Segmento com Maior Base: Segmento {seg_maior_base} ({segment_profile.loc[seg_maior_base, 'Num_Clientes']:,.0f} clientes)")

seg_mais_jovem = segment_profile['Idade_M√©dia'].idxmin()
print(f"   ‚Ä¢ Segmento Mais Jovem: Segmento {seg_mais_jovem} ({segment_profile.loc[seg_mais_jovem, 'Idade_M√©dia']:.0f} anos)")

seg_mais_cartoes = segment_profile['Cart√µes_M√©dia'].idxmax()
print(f"   ‚Ä¢ Segmento com Mais Cart√µes: Segmento {seg_mais_cartoes} ({segment_profile.loc[seg_mais_cartoes, 'Cart√µes_M√©dia']:.1f} cart√µes/cliente)")

print(f"\nüéØ OPORTUNIDADES IDENTIFICADAS:")
print(f"   1. Cross-sell de cart√µes para segmentos com baixa penetra√ß√£o")
print(f"   2. Programas de reten√ß√£o para segmentos com menor tempo m√©dio")
print(f"   3. Produtos premium para segmentos de alta renda")
print(f"   4. Ofertas regionalizadas baseadas na concentra√ß√£o geogr√°fica")
print(f"   5. Estrat√©gias digitais para segmentos mais jovens")

# ============================================================================
# 12. EXPORTAR RESULTADOS
# ============================================================================
print("\n" + "="*80)
print("üíæ EXPORTANDO RESULTADOS")
print("="*80)

output_file = 'clientes_segmentados.csv'
df_with_segments.to_csv(output_file, index=False, encoding='utf-8-sig')
print(f"\n‚úì Arquivo exportado: {output_file}")

profile_file = 'perfil_segmentos.csv'
segment_profile.to_csv(profile_file, encoding='utf-8-sig')
print(f"‚úì Perfil dos segmentos exportado: {profile_file}")

print("\n" + "="*80)
print("‚úÖ AN√ÅLISE COMPLETA!")
print("="*80)
print("\nüìÇ Arquivos gerados:")
print("   ‚Ä¢ analise_idade.html")
print("   ‚Ä¢ analise_renda.html")
print("   ‚Ä¢ analise_localizacao.html")
print("   ‚Ä¢ analise_correlacao.html")
print("   ‚Ä¢ metodo_cotovelo.html")
print("   ‚Ä¢ segmentos_pca_2d.html")
print("   ‚Ä¢ segmentos_3d.html")
print("   ‚Ä¢ clientes_segmentados.csv")
print("   ‚Ä¢ perfil_segmentos.csv")
print("\nüåê Abra os arquivos .html no navegador para visualizar os gr√°ficos interativos!")
print("="*80)
